version: 0.2  
  
phases:  
  install:  
    commands:  
      #- echo install step...  
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&  
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"  
      - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
  #If you use the Ubuntu standard image 2.0 or later  
    runtime-versions:  
      docker: 18  
      nodejs: 8  
  
  pre_build:  
    commands: 
      - cd $CODEBUILD_SRC_DIR_SourceOutputWebApp
      - echo "REACT_APP_GRAPH_QL_ENDPOINT="$GRAPH_QL >> ./.env
      - npm install
      - npm run build
      - cp -r ./build $CODEBUILD_SRC_DIR
      - cp ./.env $CODEBUILD_SRC_DIR/build
      - cd $CODEBUILD_SRC_DIR
      - touch .env
      - echo "APPLICATION_PATH="$path >> .env
      - echo "PORT="$authport >> .env
      - echo "NODE_ENV="$authnode >> .env
      - echo Logging in to Amazon ECR...   
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
      
      
  build:  
    commands:  
      - echo Build started on `date`  
      - echo Building the Docker image...        
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      #- docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG --build-arg path=${APPLICATION_PATH} --build-arg authnode=${NODE_ENV} --build-arg authport=${PORT} .  
        
  post_build:  
    commands:  
      - echo Build completed on `date`  
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG        
      - echo Pushing the Docker image...  
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$REPO:$IMAGE_TAG  
  
 
 